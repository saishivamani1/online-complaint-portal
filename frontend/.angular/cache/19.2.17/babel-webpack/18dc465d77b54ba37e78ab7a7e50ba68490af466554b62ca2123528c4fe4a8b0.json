{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let TokenInterceptor = /*#__PURE__*/(() => {\n  class TokenInterceptor {\n    intercept(req, next) {\n      const token = localStorage.getItem('token');\n      if (token) {\n        req = req.clone({\n          setHeaders: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n      }\n      return next.handle(req);\n    }\n    static {\n      this.ɵfac = function TokenInterceptor_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || TokenInterceptor)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: TokenInterceptor,\n        factory: TokenInterceptor.ɵfac\n      });\n    }\n  }\n  return TokenInterceptor;\n})();","map":{"version":3,"names":["TokenInterceptor","intercept","req","next","token","localStorage","getItem","clone","setHeaders","Authorization","handle","factory","ɵfac"],"sources":["/media/sai/DATA/DESKTOP/Node/online-complaint-portal/frontend/src/app/interceptors/token.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class TokenInterceptor implements HttpInterceptor {\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const token = localStorage.getItem('token');\n    if (token) {\n      req = req.clone({ setHeaders: { Authorization: `Bearer ${token}` } });\n    }\n    return next.handle(req);\n  }\n}\n"],"mappings":";AAKA,WAAaA,gBAAgB;EAAvB,MAAOA,gBAAgB;IAC3BC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;MAChD,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,IAAIF,KAAK,EAAE;QACTF,GAAG,GAAGA,GAAG,CAACK,KAAK,CAAC;UAAEC,UAAU,EAAE;YAAEC,aAAa,EAAE,UAAUL,KAAK;UAAE;QAAE,CAAE,CAAC;MACvE;MACA,OAAOD,IAAI,CAACO,MAAM,CAACR,GAAG,CAAC;IACzB;;;yCAPWF,gBAAgB;MAAA;IAAA;;;eAAhBA,gBAAgB;QAAAW,OAAA,EAAhBX,gBAAgB,CAAAY;MAAA;IAAA;;SAAhBZ,gBAAgB;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}