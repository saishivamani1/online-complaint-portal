{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(http) {\n      this.http = http;\n      this.base = environment.api;\n      this.token = localStorage.getItem('token');\n    }\n    setToken(token) {\n      this.token = token;\n      localStorage.setItem('token', token);\n    }\n    clearToken() {\n      this.token = null;\n      localStorage.removeItem('token');\n    }\n    authHeaders() {\n      let h = new HttpHeaders();\n      if (this.token) h = h.set('Authorization', `Bearer ${this.token}`);\n      return h;\n    }\n    login(data) {\n      return this.http.post(`${this.base}/auth/login`, data);\n    }\n    register(data) {\n      return this.http.post(`${this.base}/auth/register`, data);\n    }\n    createComplaint(form) {\n      return this.http.post(`${this.base}/complaints`, form, {\n        headers: this.authHeaders()\n      });\n    }\n    myComplaints() {\n      return this.http.get(`${this.base}/complaints/mine`, {\n        headers: this.authHeaders()\n      });\n    }\n    allComplaints(params) {\n      return this.http.get(`${this.base}/complaints`, {\n        headers: this.authHeaders(),\n        params\n      });\n    }\n    getComplaint(id) {\n      return this.http.get(`${this.base}/complaints/${id}`, {\n        headers: this.authHeaders()\n      });\n    }\n    addUpdate(id, message) {\n      return this.http.post(`${this.base}/complaints/${id}/updates`, {\n        message\n      }, {\n        headers: this.authHeaders()\n      });\n    }\n    changeStatus(id, status, assignedTo) {\n      return this.http.patch(`${this.base}/complaints/${id}/status`, {\n        status,\n        assignedTo\n      }, {\n        headers: this.authHeaders()\n      });\n    }\n    static {\n      this.ɵfac = function ApiService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || ApiService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: ApiService,\n        factory: ApiService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ApiService;\n})();","map":{"version":3,"names":["HttpHeaders","environment","ApiService","constructor","http","base","api","token","localStorage","getItem","setToken","setItem","clearToken","removeItem","authHeaders","h","set","login","data","post","register","createComplaint","form","headers","myComplaints","get","allComplaints","params","getComplaint","id","addUpdate","message","changeStatus","status","assignedTo","patch","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/media/sai/DATA/DESKTOP/Node/online-complaint-portal/frontend/src/app/services/api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport { Observable } from 'rxjs';\nimport { Complaint } from '../models/complaint.model';\n\n@Injectable({ providedIn: 'root' })\nexport class ApiService {\n  private base = environment.api;\n  private token: string | null = localStorage.getItem('token');\n\n  constructor(private http: HttpClient) {}\n\n  setToken(token: string) { this.token = token; localStorage.setItem('token', token); }\n  clearToken() { this.token = null; localStorage.removeItem('token'); }\n\n  private authHeaders(): HttpHeaders {\n    let h = new HttpHeaders();\n    if (this.token) h = h.set('Authorization', `Bearer ${this.token}`);\n    return h;\n  }\n\n  login(data: { email: string; password: string }): Observable<any> {\n    return this.http.post(`${this.base}/auth/login`, data);\n  }\n  register(data: { name: string; email: string; password: string; role?: string }): Observable<any> {\n    return this.http.post(`${this.base}/auth/register`, data);\n  }\n\n  createComplaint(form: FormData): Observable<Complaint> {\n    return this.http.post<Complaint>(`${this.base}/complaints`, form, { headers: this.authHeaders() });\n  }\n  myComplaints(): Observable<Complaint[]> {\n    return this.http.get<Complaint[]>(`${this.base}/complaints/mine`, { headers: this.authHeaders() });\n  }\n  allComplaints(params?: any): Observable<Complaint[]> {\n    return this.http.get<Complaint[]>(`${this.base}/complaints`, { headers: this.authHeaders(), params });\n  }\n  getComplaint(id: string): Observable<Complaint> {\n    return this.http.get<Complaint>(`${this.base}/complaints/${id}`, { headers: this.authHeaders() });\n  }\n  addUpdate(id: string, message: string): Observable<Complaint> {\n    return this.http.post<Complaint>(`${this.base}/complaints/${id}/updates`, { message }, { headers: this.authHeaders() });\n  }\n  changeStatus(id: string, status: string, assignedTo?: string): Observable<Complaint> {\n    return this.http.patch<Complaint>(`${this.base}/complaints/${id}/status`, { status, assignedTo }, { headers: this.authHeaders() });\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}